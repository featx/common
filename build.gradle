plugins {
    id("groovy")
    id("java")
    id("scala")
    id("org.jetbrains.kotlin.jvm") version "${kotlinVersion}"
    id("maven-publish")
}

group "org.featx.spec"
version "1.0.1-SNAPSHOT"

repositories {
    mavenCentral()
    maven {
        url = uri("https://packages.aliyun.com/maven/repository/2010689-release-56y7uo")
        credentials {
            username = "${MVN_USERNAME}"
            password = "${MVN_PASSWORD}"
        }
    }
    maven {
        url = uri("https://packages.aliyun.com/maven/repository/2010689-snapshot-bcJ57J/")
        credentials {
            username = "${MVN_USERNAME}"
            password = "${MVN_PASSWORD}"
        }
    }
}

dependencies {
    /*Compile Time*/
    compileOnly("javax.servlet:javax.servlet-api:${servletVersion}")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    /*Common Runtime*/
    implementation("com.google.guava:guava:${guavaVersion}")
    implementation("org.slf4j:slf4j-api:${slf4jVersion}")//TODO compile Only?
    /*JVM language Runtime*/
    implementation("org.codehaus.groovy:groovy:${groovyVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-common")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-js")
    implementation("org.scala-lang:scala-library:${scalaVersion}")
    /*Test*/
    testImplementation("org.junit.jupiter:junit-jupiter:${junitVersion}")
    testImplementation("org.scalactic:scalactic_2.13:${scalacticVersion}")
    testImplementation("org.scalatest:scalatest_2.13:${scalacticVersion}")
    testImplementation("io.mockk:mockk:${mockkVersion}")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
//    testImplementation("org.jetbrains.kotlin:kotlin-test-js")
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"
}

tasks.withType(GroovyCompile) {
    options.encoding = "UTF-8"
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
}

tasks.withType(ScalaCompile) {
    options.encoding = "UTF-8"
    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions.jvmTarget = "${javaVersion}"
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }

    repositories {
        maven {
            url = uri("https://packages.aliyun.com/maven/repository/2010689-release-56y7uo")
            if (project.version.endsWith("SNAPSHOT")) {
                url = uri("https://packages.aliyun.com/maven/repository/2010689-snapshot-bcJ57J/")
            }
            credentials {
                username "${MVN_USERNAME}" ?: System.getenv("MAVEN_USERNAME")
                password "${MVN_PASSWORD}" ?: System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}